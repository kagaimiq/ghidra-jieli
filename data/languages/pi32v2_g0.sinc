############################################################################################
# Group 0 #
###########

#
# nop
#
:nop is group=0 & ins0012=0x0000
{
	nop();
}

#
# idle
#
:idle is group=0 & ins0012=0x0001
{
	Idle();
}

#
# bkpt
#
:bkpt is group=0 & ins0012=0x0002
{
	Breakpoint();
}

#
# hbkpt
#
:hbkpt is group=0 & ins0012=0x0003
{
	HBreakpoint();
}

#
# csync
#
:csync is group=0 & ins0012=0x0020
{
	ContextSync();
}

#
# syscall
#
:syscall is group=0 & ins0012=0x0021
{
	SystemCall();
}

#
# ssync
#
:ssync is group=0 & ins0012=0x0022
{
	SSync();
}

#
# btbclr
#
:btbclr is group=0 & ins0012=0x0023
{
	BTBClear();
}

#
# lockclr
#
:lockclr is group=0 & ins0012=0x0040
{
	ClearLock();
}

#
# lockset
#
:lockset is group=0 & ins0012=0x0041
{
	SetLock();
}

#
# cli
#
:cli is group=0 & ins0012=0x0060
{
	DisableInterrupts();
}

#
# sti
#
:sti is group=0 & ins0012=0x0061
{
	EnableInterrupts();
}

#
# rts
#
:rts is group=0 & ins0012=0x0080
{
	return [rets];
}

#
# rti
#
:rti is group=0 & ins0012=0x0081
{
	ssp = sp;
	sp = usp;
	return [reti];
}

#
# rtx
#
:rtx is group=0 & ins0012=0x0082
{
	# probably swaps the stack pointers too..
	return [retx];
}

#
# rte
#
:rte is group=0 & ins0012=0x0083
{
	# probably swaps the stack pointers too..
	return [rete];
}

#
# swi imm3
#
:swi imm0002 is group=0 & ins0412=0x00A & imm0002
{
	SoftwareInterrupt(imm0002:1);
}

#
# testset b[rA]
#
:testset "b"[regA] is group=0 & ins0412=0x00B & regA
{
	TODO(regA:4);
}

#
# call rA
#
:call regA is group=0 & ins0412=0x00C & regA
{
	call regA;
}

#
# goto rA
#
:goto regA is group=0 & ins0412=0x00D & regA
{
	goto regA;
}

#
# cli rA
#
:cli regA is group=0 & ins0412=0x00E & regA
{
	DisableInterrupts(regA:4);
}

#
# sti rA
#
:sti regA is group=0 & ins0412=0x00F & regA
{
	EnableInterrupts(regA:4);
}

#
# tbb rA
#
:tbb regA is group=0 & ins0412=0x010 & regA
{
	local addr:4 = inst_next + regA;
	pc = inst_next + (zext(*:1 addr) << 1);
	goto [pc];
}

#
# tbh rA
#
:tbh regA is group=0 & ins0412=0x011 & regA
{
	local addr:4 = inst_next + regA;
	pc = inst_next + (zext(*:2 addr) << 1);
	goto [pc];
}

#
# pfetch [rA]
#
:pfetch [regA] is group=0 & ins0412=0x020 & regA
{
	CachePrefetch(regA:4);
}

#
# iflush [rA]
#
:iflush [regA] is group=0 & ins0412=0x021 & regA
{
	ICacheFlush(regA:4);
}

#
# flush [rA]
#
:flush [regA] is group=0 & ins0412=0x022 & regA
{
	CacheFlush(regA:4);
}

#
# flushinv [rA]
#
:flushinv [regA] is group=0 & ins0412=0x023 & regA
{
	CacheFlushInvalidate(regA:4);
}

#
# rep nwords, rA { <nwords> instruction words }
#
###:rep xxx, regA is group=0 & ins0812=0x03 & regA & xxx
### TODO

#
# pc = [sp++]
# <G> pop pc
#
:pop pc is group=0 & ins0012=0x0400 & pc
{
	pop(pc);
}

#
# [--sp] = rets
# <G> push rets
#
:push rets is group=0 & ins0012=0x0410 & rets
{
	push(rets);
}

### .... ###

#
# cc = 0
# <G> clc
#
:clc is group=0 & ins0012=0x1400
{
	$(C) = 0;
}

#
# cc = 1
# <G> stc
#
:stc is group=0 & ins0012=0x1401
{
	$(C) = 1;
}

#
# sp = usp
# <G> mov sp, usp
#
:mov sp, usp is group=0 & ins0012=0x1440 & sp & usp
{
	sp = usp;
}

#
# sp = ssp
# <G> mov sp, ssp
#
:mov sp, ssp is group=0 & ins0012=0x1441 & sp & ssp
{
	sp = ssp;
}

#
# usp = sp
# <G> mov usp, sp
#
:mov usp, sp is group=0 & ins0012=0x1442 & sp & usp
{
	usp = sp;
}

#
# ssp = sp
# <G> mov ssp, sp
#
:mov ssp, sp is group=0 & ins0012=0x1443 & sp & ssp
{
	ssp = sp;
}

#
# rA_rA = 0
# <G> clr rA_rA
#
:clr dregA is group=0 & ins0412=0x148 & dregA
{
	dregA = 0;
}

#
# rA<8-15> = 0
# <G> clr rA<8-15>
#
:clr regAh is group=0 & ins0312=0x298 & regAh
{
	regAh = 0;
}

#
# rA_rA = rB_rB
# <G> mov rA_rA, rB_rB
#
:mov dregA, dregB is group=0 & ins0812=0x15 & dregA & dregB
{
	dregA = dregB;
}

#
# rA = rB
# <G> mov rA, rB
#
:mov regA, regB is group=0 & ins0812=0x16 & regA & regB
{
	regA = regB;
}

#
# rA = rB.b0 (u)
# <G> uxtb rA, rB
#
:uxtb regAl, regBl is group=0 & ins0712=0x2E & ins0303=0 & regAl & regBl
{
	regAl = zext(regBl:1);
}

#
# rA = rB.b0 (s)
# <G> sxtb rA, rB
#
:sxtb regAl, regBl is group=0 & ins0712=0x2E & ins0303=1 & regAl & regBl
{
	regAl = sext(regBl:1);
}

#
# rA = rB.l (u)
# <G> uxth rA, rB
#
:uxth regAl, regBl is group=0 & ins0712=0x2F & ins0303=0 & regAl & regBl
{
	regAl = zext(regBl:2);
}

#
# rA = rB.l (s)
# <G> sxth rA, rB
#
:sxth regAl, regBl is group=0 & ins0712=0x2F & ins0303=1 & regAl & regBl
{
	regAl = sext(regBl:2);
}

#
# rA += rB
# <G> add rA, rB
#
:add regA, regB is group=0 & ins0812=0x18 & regA & regB
{
	regA = regA + regB;
}

#
# rA |= rB
# <G> or rA, rB
#
:or regAl, regBl is group=0 & ins0712=0x32 & ins0303=0 & regAl & regBl
{
	regAl = regAl | regBl;
}

#
# rA ^= rB
# <G> xor rA, rB
#
:xor regAl, regBl is group=0 & ins0712=0x32 & ins0303=1 & regAl & regBl
{
	regAl = regAl ^ regBl;
}

#
# rA = ~rB
# <G> not rA, rB
#
:not regAl, regBl is group=0 & ins0712=0x33 & ins0303=0 & regAl & regBl
{
	regAl = ~regBl;
}

#
# rA &= rB
# <G> and rA, rB
#
:and regAl, regBl is group=0 & ins0712=0x33 & ins0303=1 & regAl & regBl
{
	regAl = regAl & regBl;
}

#
# rA <<= rB
# <G> lsl rA, rB
#
:lsl regAl, regBl is group=0 & ins0712=0x34 & ins0303=0 & regAl & regBl
{
	regAl = regAl << regBl;
}

#
# rA <<<= rB
# <G> qasl rA, rB
#
:qasl regAl, regBl is group=0 & ins0712=0x34 & ins0303=1 & regAl & regBl
{
	# TODO... duplicate the LSB (i guess)
	regAl = regAl << regBl;
}

#
# rA >>= rB
# <G> lsr rA, rB
#
:lsr regAl, regBl is group=0 & ins0712=0x35 & ins0303=0 & regAl & regBl
{
	regAl = regAl >> regBl;
}

#
# rA >>>= rB
# <G> qasr rA, rB
#
:qasr regAl, regBl is group=0 & ins0712=0x35 & ins0303=1 & regAl & regBl
{
	regAl = regAl s>> regBl;
}

#
# rA *= rB
# <G> mul rA, rB
#
:mul regA, regB is group=0 & ins0812=0x1B & regA & regB
{
	regA = regA * regB;
}

#
# rA = rB + rC
# <G> add rA, rB, rC
#
:add regAl, regBl, regCxl is group=0 & ins0912=0xE & regAl & regBl & regCxl
{
	regAl = regBl + regCxl;
}

#
# rA = rB - rC
# <G> sub rA, rB, rC
#
:sub regAl, regBl, regCxl is group=0 & ins0912=0xF & regAl & regBl & regCxl
{
	regAl = regBl - regCxl;
}
