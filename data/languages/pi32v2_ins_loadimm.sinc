##################
#
# Load Immediate
#
##################

###########################################################################################
# Zero-extended load
###########################################################################################

#
# rA = imm8
# => mov rA, #imm8
#
:mov regAl, #imm8 is group=1 & ins0607=1 & regAl & imm0812 & imm0305
[ imm8 = (imm0305 << 5) | imm0812; ]
{
	regAl = imm8;
}

#
# rA = imm16
# => movz rA, #imm16
#
:movz regA, #imm1631 is group=7 & ins0412=0x004 & regA ; imm1631
{
	regA = imm1631;
}

# ... more to follow ... #

#
# rA = imm32
# => mov rA, #imm32
#
:mov regA, #imm32 is group=7 & ins0412=0x1FC & regA ; imm1631 ; imm3247
[ imm32 = imm1631 | (imm3247 << 16); ]
{
	regA = imm32;
}

#
# srA = imm32
# => mov srA, #imm32
#
:mov sregA, #imm32 is group=7 & ins0412=0x1FE & sregA ; imm1631 ; imm3247
[ imm32 = imm1631 | (imm3247 << 16); ]
{
	sregA = imm32;
}

###########################################################################################
# Register low part load
###########################################################################################

#
# rA.l = imm16
# => movl rA, #imm16
#
:movl regA, #imm1631 is group=7 & ins0412=0x000 & regA ; imm1631
{
	regA[0,16] = imm1631;
}

###########################################################################################
# Register high part load
###########################################################################################

#
# rA.h = imm16
# => movh rA, #imm16
#
:movh regA, #imm1631 is group=7 & ins0412=0x001 & regA ; imm1631
{
	regA[16,16] = imm1631;
}
