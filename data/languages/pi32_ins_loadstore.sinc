##################
#
# Load/Store
#
##################

###########################################################################################
# Multiple load/store
###########################################################################################

##### Most Demanded too!... #####

# {r`ABCDEFGH`<r0-r7>} = [rD++]
# lm {r`ABCDEFGH`<r0-r7>}, rD
#
#:lm {imm0007}, regDl is group=1 & ins1112=2 & imm0007
#{
#	TODO(regDl:4, imm0007:1);
#}

#
# [rD++] = {r`ABCDEFGH`<r0-r7>}
# sm {r`ABCDEFGH`<r0-r7>}, rD
#
#:sm {imm0007}, regDl is group=1 & ins1112=3 & imm0007
#{
#	TODO(regDl:4, imm0007:1);
#}


###########################################################################################
# Word atomic manipulation
###########################################################################################

#
# [rA + reladdr10] |= xval
# memor rA, reladdr10, xval
#
:memor regF, reladdr, weirdimm is (group=7 & ins0812=0x02 & addr0407s ; addr1619 & regF) & weirdimm
[ reladdr = (addr0407s << 6) | (addr1619 << 2); ]
{
	local addr:4 = regF + reladdr;
	*:4 addr = (*:4 addr) | weirdimm;
}

#
# [rA + reladdr10] &= (~xval)
# memandnot rA, reladdr10, xval
#
:memandnot regF, reladdr, weirdimm is (group=7 & ins0812=0x03 & addr0407s ; addr1619 & regF) & weirdimm
[ reladdr = (addr0407s << 6) | (addr1619 << 2); ]
{
	local addr:4 = regF + reladdr;
	*:4 addr = (*:4 addr) & ~weirdimm;
}

###########################################################################################
# Load Word
###########################################################################################

#
# rA = [addr(reladdr8)]
# lw rA, reladdr8
#
:lw regAl, raddr8 is group=1 & ins1112=1 & regAl & addr0305s & addr0610
[ raddr8 = (addr0305s << 7) | (addr0610 << 2); ]
{
	local addr:4 = (inst_next & ~3) + raddr8;
	regAl = *:4 addr;
}

#
# rA = [sp + reladdr8]
# lw rA, sp, reladdr8
#
:lw regAl, sp, raddr8 is group=2 & ins1112=0 & regAl & sp & addr0305s & addr0610
[ raddr8 = (addr0305s << 7) | (addr0610 << 2); ]
{
	local addr:4 = sp + raddr8;
	regAl = *:4 addr;
}

#
# rA = [rB + reladdr5]
# lw rA, rB, reladdr5
#
:lw regAl, regBl, raddr5 is group=2 & ins1112=1 & regAl & regBl & addr0610s
[ raddr5 = addr0610s << 2; ]
{
	local addr:4 = regBl + raddr5;
	regAl = *:4 addr;
}

#
# rA = [addr(reladdr12)]
# lw rA, reladdr12
#
:lw regE, reladdr is group=7 & ins0012=0x0420 ; addr2431 & addr2023s & regE
[ reladdr = (addr2023s << 10) | (addr2431 << 2); ]
{
	local addr:4 = (inst_next & ~3) + reladdr;
	regE = *:4 addr;
}

#
# rA = [rB + rC]
# lw rA, rB, rC
#
:lw regE, regF, regG is group=7 & ins0012=0x0720 ; regE & regF & regG
{
	local addr:4 = regF + regG;
	regE = *:4 addr;
}

#
# rA = [++rB = rC]
# addlw rA, rB, rC
#
:addlw regE, regF, regG is group=7 & ins0012=0x0724 ; regE & regF & regG
{
	regF = regF + regG;
	regE = *:4 regF;
}

#
# rA = [rB ++= rC]
# lwadd rA, rB, rC
#
:lwadd regE, regF, regG is group=7 & ins0012=0x0728 ; regE & regF & regG
{
	regE = *:4 regF;
	regF = regF + regG;
}

#
# rA = [rB + reladdr8]
# lw rA, rB, reladdr8
#
:lw regE, regF, reladdr is group=7 & ins0012=0x0820 ; regE & regF & addr2431s
[ reladdr = (addr2431s << 2); ]
{
	local addr:4 = regF + reladdr;
	regE = *:4 addr;
}

#
# rA = [++rB = reladdr8]
# addlw rA, rB, reladdr8
#
:addlw regE, regF, reladdr is group=7 & ins0012=0x0824 ; regE & regF & addr2431s
[ reladdr = (addr2431s << 2); ]
{
	regF = regF + reladdr;
	regE = *:4 regF;
}

#
# rA = [rB ++= reladdr8]
# lwadd rA, rB, reladdr8
#
:lwadd regE, regF, reladdr is group=7 & ins0012=0x0828 ; regE & regF & addr2431s
[ reladdr = (addr2431s << 2); ]
{
	regE = *:4 regF;
	regF = regF + reladdr;
}

#
# rA = [sp + reladdr12]
# lw rA, sp, reladdr12
#
:lw regE, sp, reladdr is group=7 & ins0012=0x0920 & sp ; addr2431 & addr2023s & regE
[ reladdr = (addr2023s << 10) | (addr2431 << 2); ]
{
	local addr:4 = sp + reladdr;
	regE = *:4 addr;
}

###########################################################################################
# Load Halfword (zero extend)
###########################################################################################

#
# rA = h[rB + reladdr5]
# lhz rA, rB, reladdr5
#
:lhz regAl, regBl, raddr5 is group=2 & ins1112=2 & regAl & regBl & addr0609s & addr1010
[ raddr5 = (addr0609s << 2) | (addr1010 << 1); ]
{
	local addr:4 = regBl + raddr5;
	regAl = zext(*:2 addr);
}

#
# rA = h[addr(reladdr12)]
# lhz rA, reladdr12
#
:lhz regE, reladdr is group=7 & ins0012=0x0410 ; addr2331 & addr2022s & regE
[ reladdr = (addr2022s << 10) | (addr2331 << 1); ]
{
	local addr:4 = (inst_next & ~1) + reladdr;
	regE = zext(*:2 addr);
}

#
# rA = h[rB + rC]
# lhz rA, rB, rC
#
:lhz regE, regF, regG is group=7 & ins0012=0x0710 ; regE & regF & regG
{
	local addr:4 = regF + regG;
	regE = zext(*:2 addr);
}

#
# rA = h[++rB = rC]
# addlhz rA, rB, rC
#
:addlhz regE, regF, regG is group=7 & ins0012=0x0714 ; regE & regF & regG
{
	regF = regF + regG;
	regE = zext(*:2 regF);
}

#
# rA = h[rB ++= rC]
# lhzadd rA, rB, rC
#
:lhzadd regE, regF, regG is group=7 & ins0012=0x0718 ; regE & regF & regG
{
	regE = zext(*:2 regF);
	regF = regF + regG;
}

#
# rA = h[rB + reladdr8]
# lhz rA, rB, reladdr8
#
:lhz regE, regF, reladdr is group=7 & ins0012=0x0810 ; regE & regF & addr2430s & addr3131
[ reladdr = (addr2430s << 2) | (addr3131 << 1); ]
{
	local addr:4 = regF + reladdr;
	regE = zext(*:2 addr);
}

#
# rA = h[++rB = reladdr8]
# addlhz rA, rB, reladdr8
#
:addlhz regE, regF, reladdr is group=7 & ins0012=0x0814 ; regE & regF & addr2430s & addr3131
[ reladdr = (addr2430s << 2) | (addr3131 << 1); ]
{
	regF = regF + reladdr;
	regE = zext(*:2 regF);
}

#
# rA = h[rB ++= reladdr8]
# lhzadd rA, rB, reladdr8
#
:lhzadd regE, regF, reladdr is group=7 & ins0012=0x0818 ; regE & regF & addr2430s & addr3131
[ reladdr = (addr2430s << 2) | (addr3131 << 1); ]
{
	regE = zext(*:2 regF);
	regF = regF + reladdr;
}

#
# rA = h[sp + reladdr12]
# lhz rA, sp, reladdr12
#
:lhz regE, sp, reladdr is group=7 & ins0012=0x0910 & sp ; addr2331 & addr2022s & regE
[ reladdr = (addr2022s << 10) | (addr2331 << 1); ]
{
	local addr:4 = sp + reladdr;
	regE = zext(*:2 addr);
}


###########################################################################################
# Load Halfword (sign extend)
###########################################################################################

#
# rA = h[addr(reladdr12)] (s)
# lhs rA, reladdr12
#
:lhs regE, reladdr is group=7 & ins0012=0x0490 ; addr2331 & addr2022s & regE
[ reladdr = (addr2022s << 10) | (addr2331 << 1); ]
{
	local addr:4 = (inst_next & ~1) + reladdr;
	regE = sext(*:2 addr);
}


#
# rA = h[rB + rC] (s)
# lhs rA, rB, rC
#
:lhs regE, regF, regG is group=7 & ins0012=0x0790 ; regE & regF & regG
{
	local addr:4 = regF + regG;
	regE = sext(*:2 addr);
}

#
# rA = h[++rB = rC] (s)
# addlhs rA, rB, rC
#
:addlhs regE, regF, regG is group=7 & ins0012=0x0794 ; regE & regF & regG
{
	regF = regF + regG;
	regE = sext(*:2 regF);
}

#
# rA = h[rB ++= rC] (s)
# lhsadd rA, rB, rC
#
:lhsadd regE, regF, regG is group=7 & ins0012=0x0798 ; regE & regF & regG
{
	regE = sext(*:2 regF);
	regF = regF + regG;
}

#
# rA = h[rB + reladdr8] (s)
# lhs rA, rB, reladdr8
#
:lhs regE, regF, reladdr is group=7 & ins0012=0x0890 ; regE & regF & addr2430s & addr3131
[ reladdr = (addr2430s << 2) | (addr3131 << 1); ]
{
	local addr:4 = regF + reladdr;
	regE = sext(*:2 addr);
}

#
# rA = h[rB ++= reladdr8] (s)
# addlhs rA, rB, reladdr8
#
:addlhs regE, regF, reladdr is group=7 & ins0012=0x0894 ; regE & regF & addr2430s & addr3131
[ reladdr = (addr2430s << 2) | (addr3131 << 1); ]
{
	regF = regF + reladdr;
	regE = sext(*:2 regF);
}

#
# rA = h[rB ++= reladdr8] (s)
# lhsadd rA, rB, reladdr8
#
:lhsadd regE, regF, reladdr is group=7 & ins0012=0x0898 ; regE & regF & addr2430s & addr3131
[ reladdr = (addr2430s << 2) | (addr3131 << 1); ]
{
	regE = sext(*:2 regF);
	regF = regF + reladdr;
}

#
# rA = h[sp + reladdr12] (s)
# lhs rA, sp, reladdr12
#
:lhs regE, sp, reladdr is group=7 & ins0012=0x0990 & sp ; addr2331 & addr2022s & regE
[ reladdr = (addr2022s << 10) | (addr2331 << 1); ]
{
	local addr:4 = sp + reladdr;
	regE = sext(*:2 addr);
}

###########################################################################################
# Load Byte (zero extend)
###########################################################################################

#
# rA = b[rB + reladdr5]
# lbz rA, rB, reladdr5
#
:lbz regAl, regBl, raddr5 is group=2 & ins1112=3 & regAl & regBl & addr0608s & addr0910
[ raddr5 = (addr0608s << 2) | addr0910; ]
{
	local addr:4 = regBl + raddr5;
	regAl = zext(*:1 addr);
}

#
# rA = b[addr(reladdr12)]
# lbz rA, reladdr12
#
:lbz regE, reladdr is group=7 & ins0012=0x0400 ; addr2231 & addr2021s & regE
[ reladdr = (addr2021s << 10) | addr2231; ]
{
	local addr:4 = inst_next + reladdr;
	regE = zext(*:1 addr);
}

#
# rA = b[rB + rC]
# lbz rA, rB, rC
#
:lbz regE, regF, regG is group=7 & ins0012=0x0700 ; regE & regF & regG
{
	local addr:4 = regF + regG;
	regE = zext(*:1 addr);
}

#
# rA = b[++rB = rC]
# addlbz rA, rB, rC
#
:addlbz regE, regF, regG is group=7 & ins0012=0x0704 ; regE & regF & regG
{
	regF = regF + regG;
	regE = zext(*:1 regF);
}

#
# rA = b[rB ++= rC]
# lbzadd rA, rB, rC
#
:lbzadd regE, regF, regG is group=7 & ins0012=0x0708 ; regE & regF & regG
{
	regE = zext(*:1 regF);
	regF = regF + regG;
}

#
# rA = b[rB + reladdr8]
# lbz rA, rB, reladdr8
#
:lbz regE, regF, reladdr is group=7 & ins0012=0x0800 ; regE & regF & addr2429s & addr3031
[ reladdr = (addr2429s << 2) | addr3031; ]
{
	local addr:4 = regF + reladdr;
	regE = zext(*:1 addr);
}

#
# rA = b[++rB = reladdr8]
# addlbz rA, rB, reladdr8
#
:addlbz regE, regF, reladdr is group=7 & ins0012=0x0804 ; regE & regF & addr2429s & addr3031
[ reladdr = (addr2429s << 2) | addr3031; ]
{
	regF = regF + reladdr;
	regE = zext(*:1 regF);
}

#
# rA = b[rB ++= reladdr8]
# lbzadd rA, rB, reladdr8
#
:lbzadd regE, regF, reladdr is group=7 & ins0012=0x0808 ; regE & regF & addr2429s & addr3031
[ reladdr = (addr2429s << 2) | addr3031; ]
{
	regE = zext(*:1 regF);
	regF = regF + reladdr;
}

#
# rA = b[sp + reladdr12]
# lbz rA, reladd1r2
#
:lbz regE, sp, reladdr is group=7 & ins0012=0x0900 & sp ; addr2231 & addr2021s & regE
[ reladdr = (addr2021s << 10) | addr2231; ]
{
	local addr:4 = sp + reladdr;
	regE = zext(*:1 addr);
}

###########################################################################################
# Load Byte (sign extend)
###########################################################################################

#
# rA = b[addr(reladdr12)] (s)
# lbs rA, reladdr12
#
:lbs regE, reladdr is group=7 & ins0012=0x0480 ; addr2231 & addr2021s & regE
[ reladdr = (addr2021s << 10) | addr2231; ]
{
	local addr:4 = inst_next + reladdr;
	regE = sext(*:1 addr);
}

#
# rA = b[rB + rC] (s)
# lbs rA, rB, rC
#
:lbs regE, regF, regG is group=7 & ins0012=0x0780 ; regE & regF & regG
{
	local addr:4 = regF + regG;
	regE = sext(*:1 addr);
}

#
# rA = b[++rB = rC] (s)
# addlbs rA, rB, rC
#
:addlbs regE, regF, regG is group=7 & ins0012=0x0784 ; regE & regF & regG
{
	regF = regF + regG;
	regE = sext(*:1 regF);
}

#
# rA = b[rB ++= rC] (s)
# lbsadd rA, rB, rC
#
:lbsadd regE, regF, regG is group=7 & ins0012=0x0788 ; regE & regF & regG
{
	regE = sext(*:1 regF);
	regF = regF + regG;
}

#
# rA = b[rB + reladdr8] (s)
# lbs rA, rB, reladdr8
#
:lbs regE, regF, reladdr is group=7 & ins0012=0x0880 ; regE & regF & addr2429s & addr3031
[ reladdr = (addr2429s << 2) | addr3031; ]
{
	local addr:4 = regF + reladdr;
	regE = sext(*:1 addr);
}

#
# rA = b[++rB = reladdr8] (s)
# addlbs rA, rB, reladdr8
#
:addlbs regE, regF, reladdr is group=7 & ins0012=0x0884 ; regE & regF & addr2429s & addr3031
[ reladdr = (addr2429s << 2) | addr3031; ]
{
	regF = regF + reladdr;
	regE = sext(*:1 regF);
}

#
# rA = b[rB ++= reladdr8] (s)
# lbsadd rA, rB, reladdr8
#
:lbsadd regE, regF, reladdr is group=7 & ins0012=0x0888 ; regE & regF & addr2429s & addr3031
[ reladdr = (addr2429s << 2) | addr3031; ]
{
	regE = sext(*:1 regF);
	regE = regE + reladdr;
}

#
# rA = b[sp + reladdr12] (s)
# lbs rA, sp, reladdr12
#
:lbs regE, sp, reladdr is group=7 & ins0012=0x0980 & sp ; addr2231 & addr2021s & regE
[ reladdr = (addr2021s << 10) | addr2231; ]
{
	local addr:4 = sp + reladdr;
	regE = sext(*:1 addr);
}

###########################################################################################
# Store Word
###########################################################################################

#
# [sp + reladdr8] = rA
# sw rA, sp, reladdr8
#
:sw regAl, sp, raddr8 is group=3 & ins1112=0 & regAl & sp & addr0305s & addr0610
[ raddr8 = (addr0305s << 7) | (addr0610 << 2); ]
{
	local addr:4 = sp + raddr8;
	*:4 addr = regAl:4;
}

#
# [rB + reladdr5] = rA
# sw rA, rB, reladdr5
#
:sw regAl, regBl, raddr5 is group=3 & ins1112=1 & regAl & regBl & addr0610s
[ raddr5 = addr0610s << 2; ]
{
	local addr:4 = regBl + raddr5;
	*:4 addr = regAl:4;
}

#
# [rB + rC] = rA
# sw rA, rB, rC
#
:sw regE, regF, regG is group=7 & ins0012=0x0760 ; regE & regF & regG
{
	local addr:4 = regF + regG;
	*:4 addr = regE:4;
}

#
# [++rB = rC] = rA
# addsw rA, rB, rC
#
:addsw regE, regF, regG is group=7 & ins0012=0x0764 ; regE & regF & regG
{
	regF = regF + regG;
	*:4 regF = regE:4;
}

#
# [rB ++= rC] = rA
# swadd rA, rB, rC
#
:swadd regE, regF, regG is group=7 & ins0012=0x0768 ; regE & regF & regG
{
	*:4 regF = regE:4;
	regF = regF + regG;
}

#
# [rB + reladdr8] = rA
# sw rA, rB, reladdr8
#
:sw regE, regF, reladdr is group=7 & ins0012=0x0860 ; regE & regF & addr2431s
[ reladdr = (addr2431s << 2); ]
{
	local addr:4 = regF + reladdr;
	*:4 addr = regE:4;
}

#
# [++rB = reladdr8] = rA
# addsw rA, rB, reladdr8
#
:addsw regE, regF, reladdr is group=7 & ins0012=0x0864 ; regE & regF & addr2431s
[ reladdr = (addr2431s << 2); ]
{
	regF = regF + reladdr;
	*:4 regF = regE:4;
}

#
# [rB ++= reladdr8] = rA
# swadd rA, rB, reladdr8
#
:swadd regE, regF, reladdr is group=7 & ins0012=0x0868 ; regE & regF & addr2431s
[ reladdr = (addr2431s << 2); ]
{
	*:4 regF = regE:4;
	regF = regF + reladdr;
}

#
# [sp + reladdr12] = rA
# sw rA, sp, reladdr12
#
:sw regE, sp, reladdr is group=7 & ins0012=0x0960 & sp ; addr2431 & addr2023s & regE
[ reladdr = (addr2023s << 10) | (addr2431 << 2); ]
{
	local addr:4 = sp + reladdr;
	*:4 addr = regE:4;
}

###########################################################################################
# Store halfword
###########################################################################################

#
# h[rB + reladdr5] = rA
# sh rA, rB, reladdr5
#
:sh regAl, regBl, raddr5 is group=3 & ins1112=2 & regAl & regBl & addr0609s & addr1010
[ raddr5 = (addr0609s << 2) | (addr1010 << 1); ]
{
	local addr:4 = regBl + raddr5;
	*:2 addr = regAl:2;
}

#
# h[rB + rC] = rA
# sh rA, rB, rC
#
:sh regE, regF, regG is group=7 & ins0012=0x0750 ; regE & regF & regG
{
	local addr:4 = regF + regG;
	*:2 addr = regE:2;
}

#
# h[++rB = rC] = rA
# addsh rA, rB, rC
#
:addsh regE, regF, regG is group=7 & ins0012=0x0754 ; regE & regF & regG
{
	regF = regF + regG;
	*:2 regF = regE:2;
}

#
# h[rB ++= rC] = rA
# shadd rA, rB, rC
#
:shadd regE, regF, regG is group=7 & ins0012=0x0758 ; regE & regF & regG
{
	*:2 regF = regE:2;
	regF = regF + regG;
}

#
# h[rB + reladdr8] = rA
# sh rA, rB, reladdr8
#
:sh regE, regF, reladdr is group=7 & ins0012=0x0850 ; regE & regF & addr2430s & addr3131
[ reladdr = (addr2430s << 2) | (addr3131 << 1); ]
{
	local addr:4 = regF + reladdr;
	*:2 addr = regE:2;
}

#
# h[++rB = reladdr8] = rA
# addsh rA, rB, reladdr8
#
:addsh regE, regF, reladdr is group=7 & ins0012=0x0854 ; regE & regF & addr2430s & addr3131
[ reladdr = (addr2430s << 2) | (addr3131 << 1); ]
{
	regF = regF + reladdr;
	*:2 regF = regE:2;
}

#
# h[rB ++= reladdr8] = rA
# shadd rA, rB, reladdr8
#
:shadd regE, regF, reladdr is group=7 & ins0012=0x0858 ; regE & regF & addr2430s & addr3131
[ reladdr = (addr2430s << 2) | (addr3131 << 1); ]
{
	*:2 regF = regE:2;
	regF = regF + reladdr;
}

#
# h[sp + reladdr12] = rA
# sh rA, sp, reladdr12
#
:sh regE, sp, reladdr is group=7 & ins0012=0x0950 & sp ; addr2331 & addr2022s & regE
[ reladdr = (addr2022s << 10) | (addr2331 << 1); ]
{
	local addr:4 = sp + reladdr;
	*:2 addr = regE:2;
}

###########################################################################################
# Store Byte
###########################################################################################

#
# b[rB + reladdr5] = rA
# sb rA, rB, reladdr5
#
:sb regAl, regBl, raddr5 is group=3 & ins1112=3 & regAl & regBl & addr0608s & addr0910
[ raddr5 = (addr0608s << 2) | addr0910; ]
{
	local addr:4 = regBl + raddr5;
	*:1 addr = regAl:1;
}

#
# b[rB + rC] = rA
# sb rA, rB, rC
#
:sb regE, regF, regG is group=7 & ins0012=0x0740 ; regE & regF & regG
{
	local addr:4 = regF + regG;
	*:1 addr = regE:1;
}

#
# b[++rB = rC] = rA
# addsb rA, rB, rC
#
:addsb regE, regF, regG is group=7 & ins0012=0x0744 ; regE & regF & regG
{
	regF = regF + regG;
	*:1 regF = regE:1;
}

#
# b[rB ++= rC] = rA
# sbadd rA, rB, rC
#
:sbadd regE, regF, regG is group=7 & ins0012=0x0748 ; regE & regF & regG
{
	*:1 regF = regE:1;
	regF = regF + regG;
}

#
# b[rB + reladdr8] = rA
# sb rA, rB, reladdr8
#
:sb regE, regF, reladdr is group=7 & ins0012=0x0840 ; regE & regF & addr2429s & addr3031
[ reladdr = (addr2429s << 2) | addr3031; ]
{
	local addr:4 = regF + reladdr;
	*:1 addr = regE:1;
}

#
# b[++rB = reladdr8] = rA
# addsb rA, rB, reladdr8
#
:addsb regE, regF, reladdr is group=7 & ins0012=0x0844 ; regE & regF & addr2429s & addr3031
[ reladdr = (addr2429s << 2) | addr3031; ]
{
	regF = regF + reladdr;
	*:1 regF = regE:1;
}

#
# b[rB ++= reladdr8] = rA
# sbadd rA, rB, reladdr8
#
:sbadd regE, regF, reladdr is group=7 & ins0012=0x0848 ; regE & regF & addr2429s & addr3031
[ reladdr = (addr2429s << 2) | addr3031; ]
{
	*:1 regF = regE:1;
	regF = regF + reladdr;
}

#
# b[sp + reladdr12] = rA
# sb rA, reladd1r2
#
:sb regE, sp, reladdr is group=7 & ins0012=0x0940 & sp ; addr2231 & addr2021s & regE
[ reladdr = (addr2021s << 10) | addr2231; ]
{
	local addr:4 = sp + reladdr;
	*:1 addr = regE:1;
}
