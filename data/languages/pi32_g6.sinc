############################################################################################
# Group 6 #
###########

############################################################################################
#### The Most Demanding ####
############################

:pop {pc ~ ins0003} is group=6 & ins0412=0x001 & pc & ins0003
{
	pc = *:4 sp;
	sp = sp + 4;
	return [pc];
}


:push {rets ~ ins0003} is group=6 & ins0412=0x021 & rets & ins0003
{
	sp = sp - 4;
	*:4 sp = rets;
}

############################
#### The Most Others    ####
############################################################################################

#
# testset b[rA]
#
:testset "b"[regA] is group=6 & ins0812=0x03 & regA
{
	TODO(regA:4);
}

#
# {sr`ABCDEFGH`<sfr0-7>} = [sp++]
# pops {sr`ABCDEFGH`<sfr0-7>}
#
###:pops {imm0007} is group=6 & ins0812=0x04 & imm0007

#
# [--sp] = {sr`ABCDEFGH`<sfr0-7>}
# pushs {sr`ABCDEFGH`<sfr0-7>}
#
###:pushs {imm0007} is group=6 & ins0812=0x05 & imm0007

#
# rA = rB
# mov rA, rB
#
:mov regAf, regBf is group=6 & ins0812=0x06 & regAf & regBf
{
	regAf = regBf;
}

#
# sfrA = rB
# mov sfrA, rB
#
:mov sregAf, regBf is group=6 & ins0812=0x07 & sregAf & regBf
{
	sregAf = regBf;
}

#
# rA = sfrB
# mov rA, sfrB
#
:mov regAf, sregBf is group=6 & ins0812=0x08 & regAf & sregBf
{
	regAf = sregBf;
}

#
# rA = rB.b
# uxtb rA, rB
#
:uxtb regAl, regBl is group=6 & ins0612=0x24 & regAl & regBl
{
	regAl = zext(regBl:1);
}

#
# rA = rB.l
# uxth rA, rB
#
:uxth regAl, regBl is group=6 & ins0612=0x25 & regAl & regBl
{
	regAl = zext(regBl:2);
}

#
# rA = rB.b (s)
# sxtb rA, rB
#
:sxtb regAl, regBl is group=6 & ins0612=0x26 & regAl & regBl
{
	regAl = sext(regBl:1);
}

#
# rA = rB.l (s)
# sxth rA, rB
#
:sxth regAl, regBl is group=6 & ins0612=0x27 & regAl & regBl
{
	regAl = sext(regBl:2);
}

#
# rA += rB (brev)
# addrev rA, rB
#
:addrev regAf, regBf is group=6 & ins0812=0x0A & regAf & regBf
{
	## TODO --- reverse the regBf !!
	regAf = regAf + regBf;
}

#
# rA += rB
# add rA, rB
#
:add regAf, regBf is group=6 & ins0812=0x0B & regAf & regBf
{
	regAf = regAf + regBf;
}

#
# cmn rB, rA
#
:cmn regBf, regAf is group=6 & ins0812=0x0C & regAf & regBf
{
	TODO(regAf:4, regBf:4);
}

#
# sp += imm8s
# add sp, imm8s
#
:add sp, imm0007s is group=6 & ins0812=0x0D & sp & imm0007s
{
	sp = sp + imm0007s;
}

#
# cmp rB, rA
#
:cmp regBf, regAf is group=6 & ins0812=0x0E & regAf & regBf
{
	$(N) = regBf s< regAf;
	$(Z) = regBf == regAf;
	$(C) = regBf < regAf;
	# TODO $(V)
}

#
# rA <<= rB
# lsl rA, rB
#
:lsl regAl, regBl is group=6 & ins0612=0x3C & regAl & regBl
{
	regAl = regAl << regBl;
}

#
# rA >>= rB
# lsr rA, rB
#
:lsr regAl, regBl is group=6 & ins0612=0x3D & regAl & regBl
{
	regAl = regAl >> regBl;
}

#
# rA <<<= rB
# qasl rA, rB
#
:qasl regAl, regBl is group=6 & ins0612=0x3E & regAl & regBl
{
	# TODO: extend the LSB
	regAl = regAl << regBl;
}

#
# rA >>>= rB
# qasr rA, rB
#
:qasr regAl, regBl is group=6 & ins0612=0x3F & regAl & regBl
{
	regAl = regAl s>> regBl;
}

#
# rA = rB + imm4s
# add rA, rB, imm4s
#
:add regAl, regBl, imm0609s is group=6 & ins1012=4 & regAl & regBl & imm0609s
{
	regAl = regBl + imm0609s;
}

#
# rA = rB + rC
# add rA, rB, rC
#
:add regAl, regBl, regCl is group=6 & ins0912=0xA & regAl & regBl & regCl
{
	regAl = regBl + regCl;
}

#
# rA = rB - rC
# sub rA, rB, rC
#
:sub regAl, regBl, regCl is group=6 & ins0912=0xB & regAl & regBl & regCl
{
	regAl = regBl - regCl;
}

#
# rA |= (1 << shamt)
# bitset rA, shamt
#
:bitset regAl, imm0307 is group=6 & ins0812=0x18 & regAl & imm0307
{
	regAl = regAl | (1 << imm0307);
}

#
# rA ^= (1 << shamt)
# bittgl rA, shamt
#
:bittgl regAl, imm0307 is group=6 & ins0812=0x19 & regAl & imm0307
{
	regAl = regAl ^ (1 << imm0307);
}

#
# rA |= rB
# or rA, rB
#
:or regAl, regBl is group=6 & ins0612=0x68 & regAl & regBl
{
	regAl = regAl | regBl;
}

#
# rA ^= rB
# xor rA, rB
#
:xor regAl, regBl is group=6 & ins0612=0x69 & regAl & regBl
{
	regAl = regAl ^ regBl;
}

#
# rA &= rB
# and rA, rB
#
:and regAl, regBl is group=6 & ins0612=0x6A & regAl & regBl
{
	regAl = regAl & regBl;
}

#
# rA = ~rB
# not rA, rB
#
:not regAl, regBl is group=6 & ins0612=0x6B & regAl & regBl
{
	regAl = ~regBl;
}

#
# rA &= ~(1 << shamt)
# bitclr rA, shamt
#
:bitclr regAl, imm0307 is group=6 & ins0812=0x1B & regAl & imm0307
{
	regAl = regAl & ~(1 << imm0307);
}

#
# rA += rB + c
# addc rA, rB
#
:addc regAl, regBl is group=6 & ins0612=0x70 & regAl & regBl
{
	regAl = regAl + regBl + zext($(C));
}

#
# rA -= rB + !c
# subc rA, rB
#
:subc regAl, regBl is group=6 & ins0612=0x71 & regAl & regBl
{
	regAl = regAl - regBl + zext(!$(C));
}

#
# rA = -rB
# neg rA, rB
#
:neg regAl, regBl is group=6 & ins0612=0x72 & regAl & regBl
{
	regAl = -regBl;
}

#
# macc <<= shamt6
# lslmacc shamt6
#
:lslmacc imm0005 is group=6 & ins0612=0x73 & imm0005
{
	## TODO, smamt=0 is 64 !!
	macc = macc << imm0005;
}

#
# rA <>= rB
# rotr rA, rB
#
:rotr regAl, regBl is group=6 & ins0612=0x74 & regAl & regBl
{
	## im too dumb
	regAl = regBl;
}

#
# rA <c>= rB
# rotrc rA, rB
#
:rotrc regAl, regBl is group=6 & ins0612=0x75 & regAl & regBl
{
	## im too dumb
	regAl = regBl;
}

#
# macc <<= rA
# lslmacc rA
#
:lslmacc regAf is group=6 & ins0712=0x3B & ins0305=0 & regAf
{
	macc = macc << regAf;
}

#
# macc >>= rA
# lsrmacc rA
#
:lsrmacc regAf is group=6 & ins0712=0x3C & ins0305=0 & regAf
{
	macc = macc >> regAf;
}

#
# macc >>>= rA
# asrmacc rA
#
:asrmacc regAf is group=6 & ins0712=0x3D & ins0305=0 & regAf
{
	macc = macc s>> regAf;
}

#
# macc >>= shamt6
# lsrmacc shamt6
#
:lsrmacc imm0005 is group=6 & ins0612=0x7C & imm0005
{
	## TODO, smamt=0 is 64 !!
	macc = macc >> imm0005;
}

#
# macc >>>= shamt6
# asrmacc shamt6
#
:asrmacc imm0005 is group=6 & ins0612=0x7E & imm0005
{
	## TODO, smamt=0 is 64 !!
	macc = macc s>> imm0005;
}
