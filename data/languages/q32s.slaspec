define endian    = little;
define alignment = 2;

define space ram      type=ram_space      size=4 default;
define space register type=register_space size=4;

#############################################################################
#
# General purpose registers
#
define register offset=0x0 size=4
	[ r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 ];

#
# Special function registers
#
define register offset=0x100 size=4
	[ reti rete retx rets sr4 psr cnum sr7
	  sr8  sr9  sr10 icfg usp ssp sp   pc ];

#############################################################################
#
# Instruction tokens
#

# Base word
define token instr(16)
	group = (13,15)

	#
	# instruction type fields
	#
	ins0012 = (0,12)
	ins0312 = (3,12)
	ins0412 = (4,12)
	ins0512 = (5,12)
	ins0612 = (6,12)
	ins0812 = (8,12)
	ins0912 = (9,12)
	ins1112 = (11,12)
	ins1212 = (12,12)

	ins0003 = (0,3)
	ins0303 = (3,3)

	ins0405 = (4,5)

	ins0606 = (6,6)

	ins0708 = (7,8)

	#
	# immediate fields
	#
	imm0002  = (0,2)
	imm0004  = (0,4)

	imm0108s = (1,8) signed

	imm0408  = (4,8)
	imm0411  = (4,11)
	imm0411s = (4,11) signed

	imm0610  = (6,10)

	imm0711  = (7,11)

	#
	# address fields
	#
	addr0010s = (0,10) signed

	addr0005s = (0,5) signed

	addr0008s = (0,8) signed
	addr0408  = (4,8)
	addr0408s = (4,8) signed

	#
	# register fields
	#
	regA = (0,3)
	regB = (4,7)

	regAl = (0,2)
	regBl = (3,5)
	regCl = (6,8)
	regDl = (9,11)

	sregA = (0,3)
;

# Used by the group=7 instructions
define token instr2(16)
	#
	# instruction type fields
	#
	ins2327  = (7,11)
	ins2427  = (8,11)

	#
	# immediate fields
	#
	imm1622  = (0,6)
	imm1623  = (0,7)

	imm1627s = (0,11) signed

	imm1631  = (0,15)
	imm1631s = (0,15) signed

	imm1923  = (3,7)

	ins2831  = (12,15)

	#
	# address fields
	#
	addr1631  = (0,15)
	addr1631s = (0,15) signed

	addr1627s = (0,11) signed

	#
	# register fields
	#
	regE = (12,15)
	regF = (8,11)
	regG = (4,7)

	sregE = (12,15)
	sregF = (8,11)
;

# Even more bits for some group=7 instructions (ins0812=0x1f)
define token instr3(16)
	imm3247 = (0,15)
;

#############################################################################
#
# Variables
#

attach variables [ regAl regBl regCl regDl ]
	[ r0 r1 r2 r3 r4 r5 r6 r7 ];

attach variables [ regA regB regE regF regG ]
	[ r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 ];

attach variables [ sregA sregE sregF ]
	[ reti rete retx rets sr4 psr cnum sr7
	  sr8  sr9  sr10 icfg usp ssp sp   pc ];

# PSR bits
@define V	"psr[0,1]"	# overflow
@define C	"psr[1,1]"	# carry
@define Z	"psr[2,1]"	# zero
@define N	"psr[3,1]"	# negative

#############################################################################
#
# Macros
#

macro push(reg)
{
	sp = sp - 4;
	*:4 sp = reg;
}

macro pop(reg)
{
	reg = *:4 sp;
	sp = sp + 4;
}

#############################################################################
#
# Stuff
#

#
# 10-bit jump immediate (pc-relative)
#
pcrel10m2: res is addr0008s
	[ res = (addr0008s << 1) + inst_next; ]
	{ export *:4 res; }

#
# 12-bit jump immediate (pc-relative)
#
pcrel12m2: res is addr0010s
	[ res = (addr0010s << 1) + inst_next; ]
	{ export *:4 res; }

#
# 13-bit jump immediate (pc-relative)
#
pcrel13m2: res is addr1627s
	[ res = (addr1627s << 1) + inst_next; ]
	{ export *:4 res; }

#
# 17-bit jump immediate (pc-relative)
#
pcrel17m2: res is addr1631s
	[ res = (addr1631s << 1) + inst_next; ]
	{ export *:4 res; }

#
# 23-bit jump immediate (pc-relative)
#
pcrel23m2: res is addr0005s ; addr1631
	[ res = ((addr0005s << 17) | (addr1631 << 1)) + inst_next; ]
	{ export *:4 res; }

#
# weird immediate
#
weirdimm: res is ins2327=0x00 & imm1622 [ res = (0x80 | imm1622) <<  4; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x01 & imm1622 [ res = (0x80 | imm1622) <<  5; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x02 & imm1622 [ res = (0x80 | imm1622) <<  6; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x03 & imm1622 [ res = (0x80 | imm1622) <<  7; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x04 & imm1622 [ res = (0x80 | imm1622) <<  9; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x05 & imm1622 [ res = (0x80 | imm1622) << 10; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x06 & imm1622 [ res = (0x80 | imm1622) << 11; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x07 & imm1622 [ res = (0x80 | imm1622) << 12; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x08 & imm1622 [ res = (0x80 | imm1622) << 13; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x09 & imm1622 [ res = (0x80 | imm1622) << 14; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x0A & imm1622 [ res = (0x80 | imm1622) << 15; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x0B & imm1622 [ res = (0x80 | imm1622) << 17; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x0C & imm1622 [ res = (0x80 | imm1622) << 18; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x0D & imm1622 [ res = (0x80 | imm1622) << 19; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x0E & imm1622 [ res = (0x80 | imm1622) << 20; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x0F & imm1622 [ res = (0x80 | imm1622) << 21; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x10 & imm1622 [ res = (0x80 | imm1622) << 22; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2327=0x11 & imm1622 [ res = (0x80 | imm1622) << 23; ] { local tmp:4 = res; export tmp; }

weirdimm: res is ins2427=0x9 & imm1623 [ res = imm1623 * 0x00000001; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2427=0xA & imm1623 [ res = imm1623 * 0x00000100; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2427=0xB & imm1623 [ res = imm1623 * 0x00010000; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2427=0xC & imm1623 [ res = imm1623 * 0x01000000; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2427=0xD & imm1623 [ res = imm1623 * 0x00010001; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2427=0xE & imm1623 [ res = imm1623 * 0x01000100; ] { local tmp:4 = res; export tmp; }
weirdimm: res is ins2427=0xF & imm1623 [ res = imm1623 * 0x01010101; ] { local tmp:4 = res; export tmp; }

#############################################################################
#
# Instructions
#

define pcodeop nop;
define pcodeop Idle;
define pcodeop Breakpoint;
define pcodeop HBreakpoint;
define pcodeop CoreSynchronize;
define pcodeop SystemSynchronize;
define pcodeop SystemCall;
define pcodeop ClearLock;
define pcodeop SetLock;
define pcodeop DisableInterrupts;
define pcodeop EnableInterrupts;
define pcodeop SoftwareInterrupt;
define pcodeop DataCachePrefetch;
define pcodeop InstructionCacheFlush;
define pcodeop DataCacheFlush;
define pcodeop DataCacheLineInvalidate;
define pcodeop Trigger;

define pcodeop TODO;

@include "q32s_ins_progflow.sinc"
@include "q32s_ins_stack.sinc"
@include "q32s_ins_move.sinc"
@include "q32s_ins_loadstore.sinc"
@include "q32s_ins_loadimm.sinc"
@include "q32s_ins_arithops.sinc"
@include "q32s_ins_shiftrot.sinc"
@include "q32s_ins_bitops.sinc"
@include "q32s_ins_logicops.sinc"
@include "q32s_ins_regfield.sinc"

##########################################################################################
# Uncategorized #
#################

#
# nop
#
:nop is group=0 & ins0012=0x0000
{
	nop();
}

#
# idle
#
:idle is group=0 & ins0012=0x0002
{
	Idle();
}

#
# bkpt
#
:bkpt is group=0 & ins0012=0x0004
{
	Breakpoint();
}

#
# hbkpt
#
:hbkpt is group=0 & ins0012=0x0006
{
	HBreakpoint();
}

#
# csync
#
:csync is group=0 & ins0012=0x0008
{
	CoreSynchronize();
}

#
# ssync
#
:ssync is group=0 & ins0012=0x000A
{
	SystemSynchronize();
}

#
# syscall
#
:syscall is group=0 & ins0012=0x000C
{
	SystemCall();
}

#
# lockclr
#
:lockclr is group=0 & ins0012=0x0010
{
	ClearLock();
}

#
# lockset
#
:lockset is group=0 & ins0012=0x0014
{
	SetLock();
}

#
# cli
#
:cli is group=0 & ins0012=0x0018
{
	DisableInterrupts();
}

#
# sti
#
:sti is group=0 & ins0012=0x001C
{
	EnableInterrupts();
}

#
# swi imm3
#
:swi imm0002 is group=0 & ins0312=0x005 & imm0002
{
	SoftwareInterrupt(imm0002:1);
}

#
# cc = 0
# => clc
#
:clc is group=0 & ins0012=0x0038
{
	$(C) = 0;
}

#
# cc = 1
# => stc
#
:stc is group=0 & ins0012=0x003A
{
	$(C) = 1;
}

#
# testset b[rA]
#
:testset "b"[regA] is group=0 & ins0412=0x004 & regA
{
	TODO(regA:4);
}

#
# cli rA
#
:cli regA is group=0 & ins0412=0x006 & regA
{
	DisableInterrupts(regA:4);
}

#
# sti rA
#
:sti regA is group=0 & ins0412=0x007 & regA
{
	EnableInterrupts(regA:4);
}

#
# pfetch [rA]
#
:pfetch [regA] is group=0 & ins0412=0x00C & regA
{
	DataCachePrefetch(regA:4);
}

#
# iflush [rA]
#
:iflush [regA] is group=0 & ins0412=0x00D & regA
{
	InstructionCacheFlush(regA:4);
}

#
# flush [rA]
#
:flush [regA] is group=0 & ins0412=0x00E & regA
{
	DataCacheFlush(regA:4);
}

#
# flushinv [rA]
#
:flushinv [regA] is group=0 & ins0412=0x00F & regA
{
	DataCacheLineInvalidate(regA:4);
}

#
# trigger
#
:trigger is group=7 & ins0412=0x136
{
	Trigger();
}
