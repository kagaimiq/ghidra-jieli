define endian    = little;
define alignment = 2;

define space ram      type=ram_space      size=4 default;
define space register type=register_space size=4;

#############################################################################
#
# General purpose registers
#
define register offset=0x0 size=4
	[ r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 sp ];

#
# Special function registers
#
define register offset=0x100 size=4
	[ reti rete sfr2 sfr3 maccl macch rets psr
	  sfr8 sfr9 ie1  ssp  ie0   icfg  pc   usp ];

# Multiply accumulator (maccl + macch)
define register offset=0x110 size=8
	[ macc ];

#############################################################################
#
# Instruction tokens
#

# Base word
define token instr(16)
	group = (13,15)

	#
	# instruction type fields
	#
	ins0012 = (0,12)
	ins0412 = (4,12)
	ins0612 = (6,12)
	ins0712 = (7,12)
	ins0812 = (8,12)
	ins0912 = (9,12)
	ins1012 = (10,12)
	ins1112 = (11,12)
	ins1212 = (12,12)

	ins0811 = (8,11)
	ins0407 = (4,7)
	ins0607 = (6,7)
	ins0305 = (3,5)
	ins0303 = (3,3)

	#
	# immediate fields
	#
	imm0004  = (0,4)
	imm0005  = (0,5)
	imm0007s = (0,7) signed
	imm0307  = (3,7)
	imm0310s = (3,10) signed
	imm0609s = (6,9) signed
	imm0812  = (8,12)

	imm0007  = (0,7)

	#
	# register fields
	#
	regA   = (0,3)

	regAl  = (0,2)
	regAh  = (0,2)
	regBl  = (3,5)
	regBh  = (3,5)
	sregAl = (0,2)
	sregAh = (0,2)
	sregBl = (3,5)
	sregBh = (3,5)
	regAs  = (6,6)
	regBs  = (7,7)

	regCl  = (6,8)
	regDl  = (8,10)

	#
	# address fields
	#
	addr0007  = (0,7)
	addr0007s = (0,7) signed
	addr0010s = (0,10) signed
	addr0410s = (4,10) signed

	addr0305s = (3,5) signed
	addr0610  = (6,10)

	addr0610s = (6,10) signed

	addr0608s = (6,8) signed
	addr0910  = (9,10)

	addr0609s = (6,9) signed
	addr1010  = (10,10)

	#
	# branch block
	#
	bra0001 = (0,1)
	bra0203 = (2,3)
	bra0305 = (3,5)
	bra0507 = (5,7)
;

# Used by the group=7 instructions
define token instr2(16)
	imm1631 = (0,15)

	addr1619s = (0,3) signed
	addr2031  = (4,15)
;

#############################################################################
#
# Variables
#

attach variables [ regA ]
	[ r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 sp ];

attach variables [ regAl regBl regCl regDl ]
	[ r0 r1 r2 r3 r4 r5 r6 r7 ];

attach variables [ regAh regBh ]
	[ r8 r9 r10 r11 r12 r13 r14 sp ];

attach variables [ sregAl sregBl ]
	[ reti rete sfr2 sfr3 maccl macch rets psr ];

attach variables [ sregAh sregBh ]
	[ sfr8 sfr9 ie1 ssp ie0 icfg pc usp ];

# PSR bits
@define V	"psr[0,1]"	# overflow
@define C	"psr[1,1]"	# carry
@define Z	"psr[2,1]"	# zero
@define N	"psr[3,1]"	# negative

#############################################################################
#
# Stuff
#

#
# 7-bit address immediate (pc-relative)
#
jaddr7: res is addr0410s
	[ res = (addr0410s << 1) + inst_next; ]
	{ export *:4 res; }

#
# 8-bit address immediate (pc-relative)
#
jaddr8: res is addr0007s
	[ res = (addr0007s << 1) + inst_next; ]
	{ export *:4 res; }

#
# 11-bit address immediate (pc-relative)
#
jaddr11: res is addr0010s
	[ res = (addr0010s << 1) + inst_next; ]
	{ export *:4 res; }

#
# 24-bit address immediate (pc-relative)
#
jaddr24: res is addr0007 ; addr1619s & addr2031
	[ res = ((addr1619s << 21) | (addr0007 << 13) | (addr2031 << 1)) + inst_next; ]
	{ export *:4 res; }

#
# Register constants
#
regAf: regAl is regAs=0 & regAl { export regAl; }
regAf: regAh is regAs=1 & regAh { export regAh; }
regBf: regBl is regBs=0 & regBl { export regBl; }
regBf: regBh is regBs=1 & regBh { export regBh; }

sregAf: sregAl is regAs=0 & sregAl { export sregAl; }
sregAf: sregAh is regAs=1 & sregAh { export sregAh; }
sregBf: sregBl is regBs=0 & sregBl { export sregBl; }
sregBf: sregBh is regBs=1 & sregBh { export sregBh; }

#
# Conditions
#

#eq       s (nzcv == 0)
#ne       s (nzcv != 0)
#cs         (nzcv >= 0)
#cc         (nzcv <  0)
#mi
#pl
#vs
#vc
#hi         (nzcv >  0)
#ls         (nzcv <= 0)
#ge       s (nzcv >= 0)
#lt       s (nzcv <  0)
#gt       s (nzcv >  0)
#le       s (nzcv <= 0)

# if (<cond>) { <true> } else { <false> }
cond0407: "eq" is ins0407=0x0 { tmp:1 = ($(Z)) == 1;                 export tmp; }
cond0407: "ne" is ins0407=0x1 { tmp:1 = ($(Z)) == 0;                 export tmp; }
cond0407: "cs" is ins0407=0x2 { tmp:1 = ($(C)) == 1;                 export tmp; }
cond0407: "cc" is ins0407=0x3 { tmp:1 = ($(C)) == 0;                 export tmp; }
cond0407: "mi" is ins0407=0x4 { tmp:1 = ($(N)) == 1;                 export tmp; }
cond0407: "pl" is ins0407=0x5 { tmp:1 = ($(N)) == 0;                 export tmp; }
cond0407: "vs" is ins0407=0x6 { tmp:1 = ($(V)) == 1;                 export tmp; }
cond0407: "vc" is ins0407=0x7 { tmp:1 = ($(V)) == 0;                 export tmp; }
cond0407: "hi" is ins0407=0x8 { tmp:1 = ($(C) || $(Z)) == 0;         export tmp; }	# NOT SURE
cond0407: "ls" is ins0407=0x9 { tmp:1 = ($(C) || $(Z)) == 1;         export tmp; }	# NOT SURE
cond0407: "ge" is ins0407=0xA { tmp:1 = ($(N) ^^ $(V)) == 0;         export tmp; }
cond0407: "lt" is ins0407=0xB { tmp:1 = ($(N) ^^ $(V)) == 1;         export tmp; }
cond0407: "gt" is ins0407=0xC { tmp:1 = ($(N) ^^ $(V) || $(Z)) == 0; export tmp; }
cond0407: "le" is ins0407=0xD { tmp:1 = ($(N) ^^ $(V) || $(Z)) == 1; export tmp; }
cond0407: ""   is ins0407=0xE { tmp:1 = 1;                           export tmp; }

# if (<cond>) goto X
cond0811: "eq" is ins0811=0x0 { tmp:1 = ($(Z)) == 1;                 export tmp; }
cond0811: "ne" is ins0811=0x1 { tmp:1 = ($(Z)) == 0;                 export tmp; }
cond0811: "cs" is ins0811=0x2 { tmp:1 = ($(C)) == 1;                 export tmp; }
cond0811: "cc" is ins0811=0x3 { tmp:1 = ($(C)) == 0;                 export tmp; }
cond0811: "mi" is ins0811=0x4 { tmp:1 = ($(N)) == 1;                 export tmp; }
cond0811: "pl" is ins0811=0x5 { tmp:1 = ($(N)) == 0;                 export tmp; }
cond0811: "vs" is ins0811=0x6 { tmp:1 = ($(V)) == 1;                 export tmp; }
cond0811: "vc" is ins0811=0x7 { tmp:1 = ($(V)) == 0;                 export tmp; }
cond0811: "hi" is ins0811=0x8 { tmp:1 = ($(C) || $(Z)) == 0;         export tmp; }	# NOT SURE
cond0811: "ls" is ins0811=0x9 { tmp:1 = ($(C) || $(Z)) == 1;         export tmp; }	# NOT SURE
cond0811: "ge" is ins0811=0xA { tmp:1 = ($(N) ^^ $(V)) == 0;         export tmp; }
cond0811: "lt" is ins0811=0xB { tmp:1 = ($(N) ^^ $(V)) == 1;         export tmp; }
cond0811: "gt" is ins0811=0xC { tmp:1 = ($(N) ^^ $(V) || $(Z)) == 0; export tmp; }
cond0811: "le" is ins0811=0xD { tmp:1 = ($(N) ^^ $(V) || $(Z)) == 1; export tmp; }
cond0811: ""   is ins0811=0xE { tmp:1 = 1;                           export tmp; }

#############################################################################
#
# Instructions
#

define pcodeop nop;
define pcodeop Breakpoint;
define pcodeop HBreakpoint;
define pcodeop ContextSync;
define pcodeop SSync;
define pcodeop Illegal;
define pcodeop SetLock;
define pcodeop ClearLock;
define pcodeop Idle;
define pcodeop DisableInterrupts;
define pcodeop EnableInterrupts;
define pcodeop SoftwareInterrupt;
define pcodeop SoftwareException;
define pcodeop CacheFlush;
define pcodeop CacheFlushInvalidate;
define pcodeop ICacheFlush;
define pcodeop CachePrefetch;

define pcodeop TODO;

@include "pi32_g0.sinc"
@include "pi32_g1.sinc"
@include "pi32_g2.sinc"
@include "pi32_g3.sinc"
@include "pi32_g4.sinc"
@include "pi32_g5.sinc"
@include "pi32_g6.sinc"
@include "pi32_g7.sinc"
