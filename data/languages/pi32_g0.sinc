############################################################################################
# Group 0 #
###########

#
# nop
#
:nop is group=0 & ins0012=0x0000
{
	nop();
}

#
# bkpt
#
:bkpt is group=0 & ins0012=0x0002
{
	Breakpoint();
}

#
# hbkpt
#
:hbkpt is group=0 & ins0012=0x0003
{
	HBreakpoint();
}

#
# macc = 0
# clrmacc
#
:clrmacc is group=0 & ins0012=0x0004
{
	macc = 0;
}

#
# csync
#
:csync is group=0 & ins0012=0x0008
{
	CoreSynchronize();
}

#
# ssync
#
:ssync is group=0 & ins0012=0x0009
{
	SystemSynchronize();
}

#
# illeg
#
:illeg is group=0 & ins0012=0x000A
{
	Illegal();
}

#
# lockset
#
:lockset is group=0 & ins0012=0x000C
{
	SetLock();
}

#
# lockclr
#
:lockclr is group=0 & ins0012=0x000D
{
	ClearLock();
}

#
# idle
#
:idle is group=0 & ins0012=0x0010
{
	Idle();
}

#
# cli
#
:cli is group=0 & ins0012=0x0040
{
	DisableInterrupts();
}

#
# cli rA
#
:cli regA is group=0 & ins0412=0x005 & regA
{
	DisableInterrupts(regA:4);
}

#
# sti
#
:sti is group=0 & ins0012=0x0060
{
	EnableInterrupts();
}

#
# sti rA
#
:sti regA is group=0 & ins0412=0x007 & regA
{
	EnableInterrupts(regA:4);
}

#
# swi n
#
:swi imm0005 is group=0 & ins0612=0x02 & imm0005
{
	SoftwareInterrupt(imm0005:1);
}

#
# excpt n
#
:excpt imm0005 is group=0 & ins0612=0x03 & imm0005
{
	SoftwareException(imm0005:1);
}

#
# flush [rA]
# flush rA
#
:flush regAf is group=0 & ins0712=0x03 & ins0305=0 & regAf
{
	DataCacheFlush(regAf:4);
}

#
# flushinv [rA]
# flushinv rA
#
:flushinv regAf is group=0 & ins0712=0x03 & ins0305=1 & regAf
{
	DataCacheLineInvalidate(regAf:4);
}

#
# iflush [rA]
# iflush rA
#
:iflush regAf is group=0 & ins0712=0x03 & ins0305=2 & regAf
{
	InstructionCacheFlush(regAf:4);
}

#
# pfetch [rA]
# pfetch rA
#
:pfetch regAf is group=0 & ins0712=0x03 & ins0305=3 & regAf
{
	DataCachePrefetch(regAf:4);
}
