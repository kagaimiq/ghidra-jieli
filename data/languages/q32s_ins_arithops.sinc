##################
#
# Arithmetic Operations
#
##################

###########################################################################################
# Add
###########################################################################################

#
# rA += rB
# => add rA, rB
#
:add regA, regB is group=0 & ins0812=0x9 & regA & regB
{
	regA = regA + regB;
}

#
# sp += simm10m4
# => add sp, #simm10m4
#
:add sp, #simm10m4 is group=0 & ins0912=0x5 & imm0108s & sp
[ simm10m4 = imm0108s << 2; ]
{
	sp = sp + simm10m4;
}

#
# rA += simm8
# => add rA, #simm8
#
:add regA, #imm0411s is group=4 & ins1212=0 & imm0411s & regA
{
	regA = regA + imm0411s;
}

#
# rA = rB + imm5
# => add rA, rB, #imm5
#
:add regA, regDl, #imm0408 is group=4 & ins1212=1 & regA & regDl & imm0408
{
	regA = regDl + imm0408;
}

#
# rA = sp + imm8
# => add rA, sp, #imm8
#
:add regA, sp, #imm0411 is group=5 & ins1212=0 & regA & imm0411 & sp
{
	regA = sp + imm0411;
}

#
# rA = rB + rC
# => add rA, rB, rC
#
:add regA, regCl, regDl is group=5 & ins1212=1 & ins0405=0 & regA & regCl & regDl
{
	regA = regCl + regDl;
}

#
# rA = rB + rC
# => add rA, rB, rC
#
:add regE, regF, regG is group=7 & ins0012=0x1B80 ; regE & regF & regG
{
	regE = regF + regG;
}

#
# sp += simm16
# => add sp, #simm16
#
:add sp, #imm1631s is group=7 & ins0012=0x1BC0 ; imm1631s & sp
{
	sp = sp + imm1631s;
}

#
# rA = sp + imm16
# => add rA, sp, #imm16
#
:add regA, sp, #imm1631 is group=7 & ins0412=0x1BE & regA ; imm1631 & sp
{
	regA = sp + imm1631;
}

#
# rA = rB + simm16
# => add rA, rB, #simm16
#
:add regA, regB, #imm1631s is group=7 & ins0812=0x1C & regA & regB ; imm1631s
{
	regA = regB + imm1631s;
}

###########################################################################################
# Add with carry
###########################################################################################

#
# rA = rB + rC + c
# => add.c rA, rB, rC
#
:add.c regE, regF, regG is group=7 & ins0012=0x1BA0 ; regE & regF & regG
{
	regE = regF + regG + zext($(C));
}

###########################################################################################
# Substract
###########################################################################################

#
# rA = rC - rB
# => sub rA, rC, rB
#
:sub regA, regDl, regCl is group=5 & ins1212=1 & ins0405=2 & regA & regCl & regDl
{
	regA = regDl - regCl;
}

#
# rA = rB - rC
# => add rA, rB, rC
#
:add regE, regF, regG is group=7 & ins0012=0x1B90 ; regE & regF & regG
{
	regE = regF - regG;
}

###########################################################################################
# Substract with borrow
###########################################################################################

#
# rA = rB - rC - !c
# => sub.c rA, rB, rC
#
:sub.c regE, regF, regG is group=7 & ins0012=0x1BB0 ; regE & regF & regG
{
	regE = regF - regG - zext(!$(C));
}

###########################################################################################
# Multiply
###########################################################################################

#
# rA = rB * rC
# => mul rA, rB, rC
#
:mul regAl, regBl, regCl is group=0 & ins0912=0x7 & regAl & regBl & regCl
{
	regAl = regBl * regCl;
}
