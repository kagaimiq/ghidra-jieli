##################
#
# Logic Operations
#
##################

###########################################################################################
# OR
###########################################################################################

#
# rA |= rB
# => or rA, rB
#
:or regA, regDl is group=5 & ins1212=1 & ins0405=1 & ins0606=1 & ins0708=0 & regA & regDl
{
	regA = regA | regDl;
}

###########################################################################################
# XOR
###########################################################################################

#
# rA ^= rB
# => xor rA, rB
#
:xor regA, regDl is group=5 & ins1212=1 & ins0405=1 & ins0606=1 & ins0708=1 & regA & regDl
{
	regA = regA ^ regDl;
}

###########################################################################################
# AND
###########################################################################################

#
# rA |= rB
# => and rA, rB
#
:and regA, regDl is group=5 & ins1212=1 & ins0405=1 & ins0606=1 & ins0708=2 & regA & regDl
{
	regA = regA & regDl;
}


###########################################################################################
# NOT (one's complement)
###########################################################################################

#
# rA |= rB
# => not rA, rB
#
:not regA, regDl is group=5 & ins1212=1 & ins0405=1 & ins0606=1 & ins0708=3 & regA & regDl
{
	regA = ~regDl;
}

